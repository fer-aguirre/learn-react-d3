(function (React$1, ReactDOM, d3) {
  'use strict';

  React$1 = React$1 && Object.prototype.hasOwnProperty.call(React$1, 'default') ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const BackgroundCircle = ({ radius, strokeWidth }) => (
    React.createElement( 'circle', { 
      r: radius, fill: "yellow", stroke: "black", 'stroke-width': strokeWidth })
  );

  const Eyes = ({ eyeOffsetX, eyeOffsetY, eyeRadius }) => (
    React.createElement( React.Fragment, null,
      React.createElement( 'circle', { 
        cx: -eyeOffsetX, cy: -eyeOffsetY, r: eyeRadius }),
      React.createElement( 'circle', { 
        cx: eyeOffsetX, cy: -eyeOffsetY, r: eyeRadius })
  	)
  );

  const Mouth = ({ mouthRadius, mouthWidth }) => {
    const mouthArc = d3.arc()
      .innerRadius(mouthRadius)
      .outerRadius(mouthRadius + mouthWidth)
      .startAngle(Math.PI / 2)
      .endAngle((Math.PI * 3) / 2);
    return React.createElement( 'path', { d: mouthArc() });
  };

  const width = 960;
  const height = 500;
  const centerX = width / 2;
  const centerY = height / 2;
  const strokeWidth = 20;
  const eyeOffsetX = 90;
  const eyeOffsetY = 100;
  const eyeRadius = 40;
  const mouthWidth = 20;
  const mouthRadius = 140;

  const App = () => (
    React$1.createElement( 'svg', { width: width, height: height },
      React$1.createElement( 'g', { transform: `translate(${centerX},${centerY})` },
        React$1.createElement( BackgroundCircle, { 
          radius: centerY - strokeWidth / 2, strokeWidth: strokeWidth }),
        React$1.createElement( Eyes, {
          eyeOffsetX: eyeOffsetX, eyeOffsetY: eyeOffsetY, eyeRadius: eyeRadius }),
        React$1.createElement( Mouth, {
          mouthRadius: mouthRadius, mouthWidth: mouthWidth })
      )
    )
  );

  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIkJhY2tncm91bmRDaXJjbGUuanMiLCJFeWVzLmpzIiwiTW91dGguanMiLCJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgQmFja2dyb3VuZENpcmNsZSA9ICh7IHJhZGl1cywgc3Ryb2tlV2lkdGggfSkgPT4gKFxuICA8Y2lyY2xlIFxuICAgIHI9e3JhZGl1c30gXG4gICAgZmlsbD1cInllbGxvd1wiIFxuICAgIHN0cm9rZT1cImJsYWNrXCIgXG4gICAgc3Ryb2tlLXdpZHRoPXtzdHJva2VXaWR0aH0gLz5cbik7IiwiZXhwb3J0IGNvbnN0IEV5ZXMgPSAoeyBleWVPZmZzZXRYLCBleWVPZmZzZXRZLCBleWVSYWRpdXMgfSkgPT4gKFxuICA8PlxuICAgIDxjaXJjbGUgXG4gICAgICBjeD17LWV5ZU9mZnNldFh9IFxuICAgICAgY3k9ey1leWVPZmZzZXRZfSBcbiAgICAgIHI9e2V5ZVJhZGl1c30gXG4gICAgLz5cbiAgICA8Y2lyY2xlIFxuICAgICAgY3g9e2V5ZU9mZnNldFh9IFxuICAgICAgY3k9ey1leWVPZmZzZXRZfSBcbiAgICAgIHI9e2V5ZVJhZGl1c30gXG4gICAgLz5cblx0PC8+XG4pOyIsImltcG9ydCB7IGFyYyB9IGZyb20gJ2QzJztcblxuZXhwb3J0IGNvbnN0IE1vdXRoID0gKHsgbW91dGhSYWRpdXMsIG1vdXRoV2lkdGggfSkgPT4ge1xuICBjb25zdCBtb3V0aEFyYyA9IGFyYygpXG4gICAgLmlubmVyUmFkaXVzKG1vdXRoUmFkaXVzKVxuICAgIC5vdXRlclJhZGl1cyhtb3V0aFJhZGl1cyArIG1vdXRoV2lkdGgpXG4gICAgLnN0YXJ0QW5nbGUoTWF0aC5QSSAvIDIpXG4gICAgLmVuZEFuZ2xlKChNYXRoLlBJICogMykgLyAyKTtcbiAgcmV0dXJuIDxwYXRoIGQ9e21vdXRoQXJjKCl9IC8+O1xufTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBCYWNrZ3JvdW5kQ2lyY2xlIH0gZnJvbSAnLi9CYWNrZ3JvdW5kQ2lyY2xlJztcbmltcG9ydCB7IEV5ZXMgfSBmcm9tICcuL0V5ZXMnO1xuaW1wb3J0IHsgTW91dGggIH0gZnJvbSAnLi9Nb3V0aCc7XG5cbmNvbnN0IHdpZHRoID0gOTYwO1xuY29uc3QgaGVpZ2h0ID0gNTAwO1xuY29uc3QgY2VudGVyWCA9IHdpZHRoIC8gMjtcbmNvbnN0IGNlbnRlclkgPSBoZWlnaHQgLyAyO1xuY29uc3Qgc3Ryb2tlV2lkdGggPSAyMDtcbmNvbnN0IGV5ZU9mZnNldFggPSA5MDtcbmNvbnN0IGV5ZU9mZnNldFkgPSAxMDA7XG5jb25zdCBleWVSYWRpdXMgPSA0MDtcbmNvbnN0IG1vdXRoV2lkdGggPSAyMDtcbmNvbnN0IG1vdXRoUmFkaXVzID0gMTQwO1xuXG5jb25zdCBBcHAgPSAoKSA9PiAoXG4gIDxzdmcgd2lkdGg9e3dpZHRofSBoZWlnaHQ9e2hlaWdodH0+XG4gICAgPGcgdHJhbnNmb3JtPXtgdHJhbnNsYXRlKCR7Y2VudGVyWH0sJHtjZW50ZXJZfSlgfT5cbiAgICAgIDxCYWNrZ3JvdW5kQ2lyY2xlIFxuICAgICAgICByYWRpdXM9e2NlbnRlclkgLSBzdHJva2VXaWR0aCAvIDJ9IFxuICAgICAgICBzdHJva2VXaWR0aD17c3Ryb2tlV2lkdGh9XG4gICAgICAvPlxuICAgICAgPEV5ZXNcbiAgICAgICAgZXllT2Zmc2V0WD17ZXllT2Zmc2V0WH1cbiAgICAgICAgZXllT2Zmc2V0WT17ZXllT2Zmc2V0WX0gXG4gICAgICAgIGV5ZVJhZGl1cz17ZXllUmFkaXVzfVxuICAgICAgLz5cbiAgICAgIDxNb3V0aFxuICAgICAgICBtb3V0aFJhZGl1cz17bW91dGhSYWRpdXN9XG4gICAgICAgIG1vdXRoV2lkdGg9e21vdXRoV2lkdGh9XG4gICAgICAgIC8+XG4gICAgPC9nPlxuICA8L3N2Zz5cbik7XG5cbmNvbnN0IHJvb3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKTtcblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCByb290RWxlbWVudCk7XG4iXSwibmFtZXMiOlsiYXJjIiwiUmVhY3QiXSwibWFwcGluZ3MiOiI7Ozs7OztFQUFPLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUU7RUFDeEQsRUFBRTtFQUNGLElBQUksR0FBRyxNQUFPLEVBQ1YsTUFBSyxRQUFRLEVBQ2IsUUFBTyxPQUFPLEVBQ2QsZ0JBQWMsYUFBWSxDQUFHO0VBQ2pDLENBQUM7O0VDTk0sTUFBTSxJQUFJLEdBQUcsQ0FBQyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0VBQzFELEVBQUU7RUFDRixJQUFJO0VBQ0osTUFBTSxJQUFJLENBQUMsVUFBVyxFQUNoQixJQUFJLENBQUMsVUFBVyxFQUNoQixHQUFHLFdBQVU7RUFFbkIsSUFBSTtFQUNKLE1BQU0sSUFBSSxVQUFXLEVBQ2YsSUFBSSxDQUFDLFVBQVcsRUFDaEIsR0FBRyxXQUFVLENBQ2I7RUFDTixFQUFJO0VBQ0osQ0FBQzs7RUNYTSxNQUFNLEtBQUssR0FBRyxDQUFDLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxLQUFLO0VBQ3RELEVBQUUsTUFBTSxRQUFRLEdBQUdBLE1BQUcsRUFBRTtFQUN4QixLQUFLLFdBQVcsQ0FBQyxXQUFXLENBQUM7RUFDN0IsS0FBSyxXQUFXLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztFQUMxQyxLQUFLLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUM1QixLQUFLLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ2pDLEVBQUUsT0FBTywrQkFBTSxHQUFHLFFBQVEsSUFBRyxDQUFHLENBQUM7RUFDakMsQ0FBQzs7RUNIRCxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUM7RUFDbEIsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDO0VBQ25CLE1BQU0sT0FBTyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7RUFDMUIsTUFBTSxPQUFPLEdBQUcsTUFBTSxHQUFHLENBQUMsQ0FBQztFQUMzQixNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUM7RUFDdkIsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDO0VBQ3RCLE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQztFQUN2QixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7RUFDckIsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDO0VBQ3RCLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUN4QjtFQUNBLE1BQU0sR0FBRyxHQUFHO0VBQ1osRUFBRUMsZ0NBQUssT0FBTyxLQUFNLEVBQUMsUUFBUTtFQUM3QixJQUFJQSw4QkFBRyxXQUFXLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7RUFDbkQsTUFBTUEsdUJBQUM7RUFDUCxRQUFRLFFBQVEsT0FBTyxHQUFHLFdBQVcsR0FBRyxDQUFFLEVBQ2xDLGFBQWEsYUFBWTtFQUVqQyxNQUFNQSx1QkFBQztFQUNQLFFBQVEsWUFBWSxVQUFXLEVBQ3ZCLFlBQVksVUFBVyxFQUN2QixXQUFXLFdBQVU7RUFFN0IsTUFBTUEsdUJBQUM7RUFDUCxRQUFRLGFBQWEsV0FBWSxFQUN6QixZQUFZLFlBQVcsQ0FDckI7RUFDVixLQUFRO0VBQ1IsR0FBUTtFQUNSLENBQUMsQ0FBQztBQUNGO0VBQ0EsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztFQUNwRCxRQUFRLENBQUMsTUFBTSxDQUFDQSx1QkFBQyxTQUFHLEVBQUcsRUFBRSxXQUFXLENBQUM7Ozs7In0=